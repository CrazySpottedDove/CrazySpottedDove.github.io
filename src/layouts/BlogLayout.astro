---
import AppLayout from "@layouts/AppLayout.astro";
import Pagination from "@components/Pagination.astro";
import { Image } from "astro:assets";
import authorImage from "../assets/me.jpg";
import { author, tag } from "@data/socials";

interface Props {
	title: string;
	description: string;
	pubDate: Date;
	url: string;
	updatedDate?: Date;
	tags: string[];
	headings?: {
		depth: number;
		slug: string;
		text: string;
	}[];
}

const {
	title,
	description,
	pubDate,
	url,
	updatedDate,
	tags,
	headings = [],
} = Astro.props;

// 只筛选出 depth === 2 的标题作为目录
const h2Headings = headings.filter((h) => h.depth === 2);

const ogImage = {
	src: `/image/${url}.png`,
	alt: title,
};

const fullPubDate = pubDate.toLocaleDateString("en", {
	dateStyle: "full",
});
---

<AppLayout
	title={title}
	description={description}
	ogImage={ogImage}
	pubDate={updatedDate ?? pubDate}
	tags={tags}
	containerWidth="max-w-8xl"
>
	<div class="flex gap-8">
		<!-- 左侧：根据二级标题生成目录 -->
		<aside class="w-60 flex-shrink-0 fixed top-16 ml-20">
			<h2 class="text-xl font-bold mb-4 text-blue-500">目录</h2>
			<ul class="space-y-2">
				{
					h2Headings.map(({ slug, text }) => (
						<li>
							<a
								id={`left-${slug}`}
								class="text-cyan-600 text-sm font-bold"
								href={`#${slug}`}
							>
								{text}
							</a>
						</li>
					))
				}
			</ul>
		</aside>

		<!-- 右侧：正文插槽 -->
		<main class="flex-1 p-4 ml-80 mr-80">
			<header class="flex flex-col mb-8">
				<h1
					class="text-2xl sm:text-4xl pb-8 font-bold text-center text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-sky-400"
				>
					{title}
				</h1>
				<div
					class="inline-flex items-center mb-8 justify-between align-middle flex-wrap gap-2"
				>
					<time
						datetime={pubDate.toISOString()}
						class="block text-center dark:text-zinc-400 text-zinc-600 mb-4 text-sm sm:text-base"
					>
						{fullPubDate}
					</time>
					<div class="flex items-center gap-4">
						<div class="aspect-square rounded-full overflow-hidden">
							<Image
								src={authorImage}
								alt="Image of the author"
								loading="eager"
								class="aspect-square w-10"
								width={80}
								height={80}
							/>
						</div>
						<p class="dark:text-zinc-400 text-zinc-700 text-sm">
							<span class="block font-semibold">{author}</span>
							<a
								class="dark:text-blue-400 text-blue-600 hover:underline block"
								href="https://github.com/CrazySpottedDove"
								target="_blank"
								rel="noopener noreferrer"
								>{tag}
							</a>
						</p>
					</div>
				</div>
			</header>
			<article
				class="prose dark:prose-invert lg:prose-lg dark:prose-code:text-zinc-300 dark:prose-a:text-blue-400 prose-a:text-blue-600 max-w-none hover:prose-a:underline focus:prose-a:underline prose-a:no-underline dark:prose-headings:text-teal-500 prose-img:rounded-lg"
			>
				<slot />
			</article>
		</main>
		<aside class="w-60 flex-shrink-0 fixed top-16 right-0 right-menu mr-10">
			<h2
				class="text-xl font-bold mb-4 text-blue-500"
				id="right-menu-header"
			>
			</h2>
			<ul
				class="space-y-2"
				id="right-menu-list"
			>
				<!-- 将由客户端脚本填充 -->
			</ul>
		</aside>
	</div>
	<Pagination />
	<script is:inline>
		document.addEventListener("DOMContentLoaded", () => {
			// 选取所有 h2、h3 元素（确保 Markdown 渲染时为 <h2>、<h3> 且有 id 属性）
			const allHeadings = Array.from(
				document.querySelectorAll("h2[id], h3[id]"),
			);
			const leftMenuLinks = document.querySelectorAll(".left-menu a");
			const rightMenuList = document.getElementById("right-menu-list");
			const rightMenuHeader =
				document.getElementById("right-menu-header");

			let activeH2 = null;

			const observerOptions = {
				rootMargin: "0px 0px -80% 0px",
				threshold: 0,
			};

			const observerCallback = (entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						const tag = entry.target.tagName.toLowerCase();
						if (tag === "h2") {
							activeH2 = entry.target;
							updateLeftActive(entry.target.id);
							updateRightMenu();
						} else if (tag === "h3") {
							updateRightActive(entry.target.id);
						}
					}
				});
			};

			const observer = new IntersectionObserver(
				observerCallback,
				observerOptions,
			);
			allHeadings.forEach((heading) => observer.observe(heading));

			function updateLeftActive(activeId) {
				leftMenuLinks.forEach((link) => {
					if (link.getAttribute("href") === `#${activeId}`) {
						link.classList.add("active");
					} else {
						link.classList.remove("active");
					}
				});
			}

			function updateRightActive(activeId) {
				const rightLinks = document.querySelectorAll(".right-menu a");
				rightLinks.forEach((link) => {
					if (link.getAttribute("href") === `#${activeId}`) {
						link.classList.add("active");
					} else {
						link.classList.remove("active");
					}
				});
			}

			// 根据当前激活的 H2 构建右侧 H3 目录
			function updateRightMenu() {
				if (!activeH2) return;
				// 过滤出 activeH2 后面直到下一个 h2 的所有 h3
				const rightH3 = [];
				let startCollect = false;
				for (const heading of allHeadings) {
					if (heading.id === activeH2.id) {
						startCollect = true;
						continue;
					}
					if (
						startCollect &&
						heading.tagName.toLowerCase() === "h3"
					) {
						rightH3.push(heading);
					}
					if (
						startCollect &&
						heading.tagName.toLowerCase() === "h2"
					) {
						break;
					}
				}
				let html = "";
				rightH3.forEach((h3) => {
					html += `<li><a href="#${h3.id}" class="text-cyan-600 text-sm font-bold">${h3.textContent}</a></li>`;
				});
				rightMenuList.innerHTML = html;
				rightMenuHeader.textContent = activeH2.textContent;
			}
		});
	</script>
</AppLayout>
